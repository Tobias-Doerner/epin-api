// tslint:disable
/**
 * EPIN Api
 * Elektronisches Polleninformationsnetwerk (ePIN)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    network?: string;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    lat?: number;
}
/**
 * 
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    from?: number;
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    to?: number;
    /**
     * 
     * @type {Array<MeasurementMeasurements>}
     * @memberof Measurement
     */
    measurements?: Array<MeasurementMeasurements>;
}
/**
 * 
 * @export
 * @interface MeasurementData
 */
export interface MeasurementData {
    /**
     * 
     * @type {number}
     * @memberof MeasurementData
     */
    from?: number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementData
     */
    to?: number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementData
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface MeasurementMeasurements
 */
export interface MeasurementMeasurements {
    /**
     * 
     * @type {string}
     * @memberof MeasurementMeasurements
     */
    polle?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementMeasurements
     */
    location?: string;
    /**
     * 
     * @type {Array<MeasurementData>}
     * @memberof MeasurementMeasurements
     */
    data?: Array<MeasurementData>;
}

/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all locations.
         * @summary Get locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/locations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all locations.
         * @summary Get locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).getLocations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all locations.
         * @summary Get locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations(options?: any): AxiosPromise<Array<Location>> {
            return LocationApiFp(configuration).getLocations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * Get all locations.
     * @summary Get locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public getLocations(options?: any) {
        return LocationApiFp(this.configuration).getLocations(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * MeasurementApi - axios parameter creator
 * @export
 */
export const MeasurementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get filtered measurements.
         * @summary Get measurements
         * @param {number} from 
         * @param {number} to 
         * @param {Array<string>} locations 
         * @param {Array<string>} pollen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurements: async (from: number, to: number, locations: Array<string>, pollen: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling getMeasurements.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling getMeasurements.');
            }
            // verify required parameter 'locations' is not null or undefined
            if (locations === null || locations === undefined) {
                throw new RequiredError('locations','Required parameter locations was null or undefined when calling getMeasurements.');
            }
            // verify required parameter 'pollen' is not null or undefined
            if (pollen === null || pollen === undefined) {
                throw new RequiredError('pollen','Required parameter pollen was null or undefined when calling getMeasurements.');
            }
            const localVarPath = `/measurements`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (locations) {
                localVarQueryParameter['locations'] = locations;
            }

            if (pollen) {
                localVarQueryParameter['pollen'] = pollen;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasurementApi - functional programming interface
 * @export
 */
export const MeasurementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get filtered measurements.
         * @summary Get measurements
         * @param {number} from 
         * @param {number} to 
         * @param {Array<string>} locations 
         * @param {Array<string>} pollen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeasurements(from: number, to: number, locations: Array<string>, pollen: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Measurement>> {
            const localVarAxiosArgs = await MeasurementApiAxiosParamCreator(configuration).getMeasurements(from, to, locations, pollen, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MeasurementApi - factory interface
 * @export
 */
export const MeasurementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get filtered measurements.
         * @summary Get measurements
         * @param {number} from 
         * @param {number} to 
         * @param {Array<string>} locations 
         * @param {Array<string>} pollen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurements(from: number, to: number, locations: Array<string>, pollen: Array<string>, options?: any): AxiosPromise<Measurement> {
            return MeasurementApiFp(configuration).getMeasurements(from, to, locations, pollen, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeasurementApi - object-oriented interface
 * @export
 * @class MeasurementApi
 * @extends {BaseAPI}
 */
export class MeasurementApi extends BaseAPI {
    /**
     * Get filtered measurements.
     * @summary Get measurements
     * @param {number} from 
     * @param {number} to 
     * @param {Array<string>} locations 
     * @param {Array<string>} pollen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getMeasurements(from: number, to: number, locations: Array<string>, pollen: Array<string>, options?: any) {
        return MeasurementApiFp(this.configuration).getMeasurements(from, to, locations, pollen, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PollenApi - axios parameter creator
 * @export
 */
export const PollenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all pollen.
         * @summary Get pollen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollen: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/pollen`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PollenApi - functional programming interface
 * @export
 */
export const PollenApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all pollen.
         * @summary Get pollen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPollen(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await PollenApiAxiosParamCreator(configuration).getPollen(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PollenApi - factory interface
 * @export
 */
export const PollenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all pollen.
         * @summary Get pollen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollen(options?: any): AxiosPromise<Array<string>> {
            return PollenApiFp(configuration).getPollen(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PollenApi - object-oriented interface
 * @export
 * @class PollenApi
 * @extends {BaseAPI}
 */
export class PollenApi extends BaseAPI {
    /**
     * Get all pollen.
     * @summary Get pollen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PollenApi
     */
    public getPollen(options?: any) {
        return PollenApiFp(this.configuration).getPollen(options).then((request) => request(this.axios, this.basePath));
    }

}


